local lru = require("ugaterm.lru")
local terminal = require("ugaterm.terminal")

local function reset()
  terminal.prev_winid = nil
  terminal.term_winid = nil
  terminal.buf_cache = lru.new()
end

local function num_win()
  return vim.fn.winnr("$")
end

vim.opt.shell = "bash"

describe("Test for terminal", function()
  before_each(function()
    vim.cmd("silent %bwipeout!")
    reset()
  end)

  describe("open()", function()
    it("no flags", function()
      assert.equal(1, num_win())
      terminal:open({})
      assert.equal(2, num_win())
      -- Don't toggle
      terminal:open({})
      assert.equal(2, num_win())
    end)

    it("-new", function()
      assert.equal(1, num_win())
      terminal:open({ new = true })
      assert.equal(2, num_win())
      assert.equal("terminal://1", vim.api.nvim_buf_get_name(0))
      terminal:open({ new = true })
      assert.equal("terminal://2", vim.api.nvim_buf_get_name(0))
    end)

    it("-toggle", function()
      assert.equal(1, num_win())
      terminal:open({ toggle = true })
      assert.equal(2, num_win())
      terminal:open({ toggle = true })
      assert.equal(1, num_win())
    end)

    it("-select", function()
      -- Select the last item.
      -- The default vim.ui.select is not available for vusted.
      vim.ui.select = function(items, _, on_choice)
        local selected_item = items[#items]
        on_choice(selected_item)
      end

      assert.equal(1, num_win())
      terminal:open({})
      assert.equal(2, num_win())
      terminal:open({ new = true })
      assert.equal("terminal://2", vim.api.nvim_buf_get_name(0))
      terminal:open({ select = true })
      assert.equal("terminal://1", vim.api.nvim_buf_get_name(0))
    end)

    it("-keep_cursor", function()
      assert.equal(1, num_win())
      local prev_winid = vim.api.nvim_get_current_win()
      terminal:open({ keep_cursor = true })
      vim.wait(500)
      assert.equal(2, num_win())
      assert.equal(prev_winid, vim.api.nvim_get_current_win())
    end)
  end)

  describe("hide()", function()
    it("no flags", function()
      assert.equal(1, num_win())
      terminal:open({})
      assert.equal(2, num_win())
      terminal:hide({})
      assert.equal(1, num_win())
      assert.equal(1, #terminal.buf_cache:get_all())
    end)

    it("-delete", function()
      assert.equal(1, num_win())
      terminal:open({})
      assert.equal(2, num_win())
      terminal:hide({ delete = true })
      assert.equal(1, num_win())
      assert.equal(0, #terminal.buf_cache:get_all())
    end)
  end)

  describe("send()", function()
    it("empty", function()
      terminal:open({})
      vim.wait(500)
      local old_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      terminal:send()
      terminal:send("")
      vim.wait(500)
      local new_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      assert.same(old_lines, new_lines)
    end)

    it("string", function()
      terminal:open({})
      vim.wait(500)
      local old_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      assert.falsy(table.concat(old_lines, "\n"):find("echo 'hi'\nhi"))
      terminal:send("echo 'hi'")
      vim.wait(500)
      local new_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      assert.truthy(table.concat(new_lines, "\n"):find("echo 'hi'\nhi"))
    end)

    it("string[]", function()
      terminal:open({})
      vim.wait(500)
      local old_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      assert.falsy(table.concat(old_lines, "\n"):find("echo 'foo'\nfoo"))
      terminal:send({ "echo 'foo'", "echo 'bar'" })
      vim.wait(500)
      local new_lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
      assert.truthy(table.concat(new_lines, "\n"):find("echo 'foo'\nfoo"))
      assert.truthy(table.concat(new_lines, "\n"):find("echo 'bar'\nbar"))
    end)
  end)

  describe("rename()", function()
    vim.ui.input = function(_, on_confirm)
      on_confirm("new name")
    end

    it("No arguments", function()
      terminal:open({})
      assert.equal("terminal://1", vim.api.nvim_buf_get_name(0))
      terminal:rename()
      local bufname = vim.api.nvim_buf_get_name(0)
      assert.truthy(bufname:find("new name$"))
    end)

    it("newname", function()
      terminal:open({})
      assert.equal("terminal://1", vim.api.nvim_buf_get_name(0))
      terminal:rename("newnewnew")
      local bufname = vim.api.nvim_buf_get_name(0)
      assert.truthy(bufname:find("newnewnew$"))
    end)
  end)
end)
